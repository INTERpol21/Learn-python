"""
Задание 1.	Написать программу, которая будет складывать, вычитать,
умножать или делить два числа. Числа и знак операции вводятся пользователем.
После выполнения вычисления программа не должна завершаться, а должна
запрашивать новые данные для вычислений. Завершение программы должно
выполняться при вводе символа '0' в качестве знака операции. Если пользователь
вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
сообщать ему об ошибке и снова запрашивать знак операции.
Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.
Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ
Решите через рекурсию. В задании нельзя применять циклы.
Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""

#1.
OPERATIONS = {
    "+": (lambda x, y: x + y),
    "-": (lambda x, y: x - y),
    "*": (lambda x, y: x * y),
}

def calculator(expr):
    if isinstance(expr, tuple):
        return OPERATIONS[expr[1]](calculator(expr[0]), calculator(expr[2]))

    return expr

print(calculator(((1, '+', 2), '*', 3)))


#2. Уже ближе
def ret(s):
    operations = ['+', '-', '*', '/']
    operation = input('Введите операцию: ')
    num1 = input('Введите первое число: ')
    num2 = input('Введите второе число: ')
    s = str(s)
    if s.isdigit():
        return float(s)
    for c in ('-','+','*','/'):
        left, op, right = s.partition(c)
        if op == '*':
            return ret(left) * ret(right)
        elif op == '/':
            return ret(left) / ret(right)
        elif op == '+':
            return ret(left) + ret(right)
        elif op == '-':
            return ret(left) - ret(right)

#3. Верное решение

def ret():
    operations = ['+', '-', '*', '/']
    operation = input('Введите операцию: ')
    num1 = input('Введите первое число: ')
    num2 = input('Введите второе число: ')
    if operation == 0:
        return None
    elif operation in operations:
        if operation == operations[0]:
            result = int(num1) + int(num2)
            return print(result), ret()
        elif operation == operations[1]:
            result = int(num1) - int(num2)
            return print(result), ret()
        elif operation == operations[2]:
            result = int(num1) * int(num2)
            return print(result), ret()
        elif operation == operations[3]:
            if num2 == "0":
                return print("Нельзя делить на ноль"), ret()
            else:
                result = int(num1) / int(num2)
                return print(result), ret()
if __name__ == "__main__":
    ret()


"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.
Решите через рекурсию. В задании нельзя применять циклы.
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def recur (num, even=0, odd=0):
    if num == 0:
        return even, odd
    else:
        alt = num % 10
        numb = num// 10
        if alt % 2 == 0:
            even+=1
        else:
            odd -= 1
        return recur(num, even, odd)

try:
    NUMB = int(input("Введите натуральное число: "))
    print(f"Количество четных и нечетных цифр в числе: {recur(NUMB)}")
except ValueError:
    print("Вы вместо числа ввели строку. Исправьтесь")
